// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String      @id @default(cuid())
  email    String   @unique
  name     String?
  createAt DateTime @default(now()) @map("create_at")
  updateAt DateTime @updatedAt @map("update_at")
  post Post[]
  refreshToken RefreshToken[]

  followers Follow[] @relation("followers")
  following Follow[] @relation("following")

  @@map("user")
}

model Follow {
  id String @id @default(cuid())

  followerId String @map("follower_id")
  followingId String @map("following_id")
  createAt DateTime @default(now()) @map("create_at")
  
  follower User @relation("following", fields: [followerId], references: [id])
  following User @relation("followers", fields: [followingId], references: [id])

  @@unique([followerId, followingId], name: "unique_follow")
  @@index([followerId])
  @@index([followingId])

  @@map("follow")
}

model Post {
  id          String      @id @default(cuid())
  title       String
  description String?
  published   Boolean  @default(false)
  createAt    DateTime @default(now()) @map("create_at")
  updateAt    DateTime @updatedAt @map("update_at")
  authorId    String      @map("author_id")
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("post")
}

model RefreshToken {
  id          String    @id @default(cuid())
  token       String    @unique
  userId      String    
  user        User      @relation(fields: [userId], references: [id])
  createAt    DateTime  @default(now())
  expireAt    DateTime
  revoked     Boolean   @default(false)
  deviceInfo  String?

  @@map("refresh-token")

}
